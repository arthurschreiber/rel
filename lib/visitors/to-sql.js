// Generated by CoffeeScript 1.8.0
var Attributes, Nodes, Reduce, SqlLiteral, ToSql, exports, u,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

u = require('underscore');

Reduce = require('./reduce');

Nodes = require('../nodes');

SqlLiteral = require('../nodes/sql-literal');

Attributes = require('../attributes');

ToSql = (function(_super) {
  __extends(ToSql, _super);

  function ToSql(engine) {
    this.engine = engine;
    ToSql.__super__.constructor.call(this);
  }

  ToSql.prototype.visitRelNodesDeleteStatement = function(o, collector) {
    var _ref;
    collector.append("DELETE FROM ");
    this.visit(o.relation, collector);
    if ((_ref = o.wheres) != null ? _ref.length : void 0) {
      collector.append(" WHERE ");
      return this.injectJoin(o.wheres, collector, " AND ");
    }
  };

  ToSql.prototype.buildSubselect = function(key, o) {
    var core, stmt;
    stmt = new Nodes.SelectStatement();
    core = stmt.cores[0];
    core.froms = o.relation;
    core.wheres = o.wheres;
    core.projections = [key];
    stmt.limit = o.limit;
    stmt.orders = o.orders;
    return stmt;
  };

  ToSql.prototype.visitRelNodesUpdateStatement = function(o, collector) {
    var wheres, _ref, _ref1;
    wheres = !((_ref = u.orders) != null ? _ref.length : void 0) && (o.limit == null) ? o.wheres : [new Nodes.In(o.key, [this.buildSubselect(o.key, o)])];
    collector.append("UPDATE ");
    this.visit(o.relation, collector);
    if ((_ref1 = o.values) != null ? _ref1.length : void 0) {
      collector.append(" SET ");
      this.injectJoin(o.values, collector, ", ");
    }
    if (wheres != null ? wheres.length : void 0) {
      collector.append(" WHERE ");
      return this.injectJoin(wheres, collector, " AND ");
    }
  };

  ToSql.prototype.visitRelNodesInsertStatement = function(o, collector) {
    var _ref;
    collector.append("INSERT INTO ");
    this.visit(o.relation, collector);
    if ((_ref = o.columns) != null ? _ref.length : void 0) {
      collector.append(" (");
      collector.append(u.map(o.columns, (function(_this) {
        return function(x) {
          return _this.quoteColumnName(x.name);
        };
      })(this)).join(', '));
      collector.append(")");
    }
    if (o.values) {
      collector.append(" ");
      return this.visit(o.values, collector);
    } else if (o.select) {
      collector.append(" ");
      return this.visit(o.select, collector);
    }
  };

  ToSql.prototype.visitRelNodesExists = function(o, collector) {
    collector.append("EXISTS (");
    this.visit(o.expressions, collector);
    collector.append(")");
    if (o.alias) {
      collector.append(" AS ");
      return this.visit(o.alias, collector);
    }
  };

  ToSql.prototype.tableExists = function(name) {
    if (name == null) {

    }
  };

  ToSql.prototype.columnFor = function(attr) {
    var name, table;
    if (attr == null) {
      return;
    }
    name = attr.name.toString();
    table = attr.relation.name;
    return this.engine.columnFor(table, name);
  };

  ToSql.prototype.visitRelNodesValues = function(o, collector) {
    var expr, expressions, i, last, _i, _len;
    collector.append("VALUES (");
    expressions = o.expressions();
    last = expressions.length - 1;
    for (i = _i = 0, _len = expressions.length; _i < _len; i = ++_i) {
      expr = expressions[i];
      if (expr === null) {
        collector.append(this.quote(expr, null));
      } else if (expr.constructor === SqlLiteral) {
        this.visit(expr, collector);
      } else {
        collector.append(this.quote(expr, null));
      }
      if (i !== last) {
        collector.append(", ");
      }
    }
    return collector.append(")");
  };

  ToSql.prototype.visitRelNodesSelectStatement = function(o, collector) {
    var core, _i, _len, _ref, _ref1;
    if (o["with"] != null) {
      this.visit(o["with"], collector);
      collector.append(" ");
    }
    _ref = o.cores;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      core = _ref[_i];
      this.visit(core, collector);
    }
    if ((_ref1 = o.orders) != null ? _ref1.length : void 0) {
      collector.append(" ORDER BY ");
      this.injectJoin(o.orders, collector, ", ");
    }
    this.maybeVisit(o.limit, collector);
    this.maybeVisit(o.offset, collector);
    return this.maybeVisit(o.lock, collector);
  };

  ToSql.prototype.visitRelNodesSelectCore = function(o, collector) {
    var _ref, _ref1, _ref2;
    collector.append("SELECT");
    this.maybeVisit(o.top, collector);
    this.maybeVisit(o.setQuantifier, collector);
    if ((_ref = o.projections) != null ? _ref.length : void 0) {
      collector.append(" ");
      this.injectJoin(o.projections, collector, ', ');
    }
    if (!o.source.isEmpty()) {
      collector.append(" FROM ");
      this.visit(o.source, collector);
    }
    if ((_ref1 = o.wheres) != null ? _ref1.length : void 0) {
      collector.append(" WHERE ");
      this.injectJoin(o.wheres, collector, " AND ");
    }
    if ((_ref2 = o.groups) != null ? _ref2.length : void 0) {
      collector.append(" GROUP BY ");
      this.injectJoin(o.groups, collector, ", ");
    }
    return this.maybeVisit(o.having, collector);
  };

  ToSql.prototype.visitRelNodesWith = function(o, collector) {
    collector.append("WITH ");
    return this.injectJoin(o.children, collector, ', ');
  };

  ToSql.prototype.visitRelNodesWithRecursive = function(o, collector) {
    collector.append("WITH RECURSIVE ");
    return this.injectJoin(o.children, collector, ', ');
  };

  ToSql.prototype.visitRelNodesUnion = function(o, collector) {
    collector.append("(");
    this.visit(o.left, collector);
    collector.append(" UNION ");
    this.visit(o.right, collector);
    return collector.append(")");
  };

  ToSql.prototype.visitRelNodesUnionAll = function(o, collector) {
    collector.append("(");
    this.visit(o.left, collector);
    collector.append(" UNION ALL ");
    this.visit(o.right, collector);
    return collector.append(")");
  };

  ToSql.prototype.visitRelNodesIntersect = function(o, collector) {
    collector.append("(");
    this.visit(o.left, collector);
    collector.append(" INTERSECT ");
    this.visit(o.right, collector);
    return collector.append(")");
  };

  ToSql.prototype.visitRelNodesExcept = function(o, collector) {
    collector.append("(");
    this.visit(o.left, collector);
    collector.append(" EXCEPT ");
    this.visit(o.right, collector);
    return collector.append(")");
  };

  ToSql.prototype.visitRelNodesHaving = function(o, collector) {
    collector.append("HAVING ");
    return this.visit(o.expr, collector);
  };

  ToSql.prototype.visitRelNodesOffset = function(o, collector) {
    collector.append("OFFSET ");
    return this.visit(o.expr, collector);
  };

  ToSql.prototype.visitRelNodesLimit = function(o, collector) {
    collector.append("LIMIT ");
    return this.visit(o.expr, collector);
  };

  ToSql.prototype.visitRelNodesTop = function(o, collector) {};

  ToSql.prototype.visitRelNodesLock = function(o, collector) {
    return this.visit(o.expr, collector);
  };

  ToSql.prototype.visitRelNodesGrouping = function(o, collector) {
    if (o.expr instanceof Nodes.Grouping) {
      return this.visit(o.expr, collector);
    } else {
      collector.append("(");
      this.visit(o.expr, collector);
      return collector.append(")");
    }
  };

  ToSql.prototype.visitRelNodesSelectManager = function(o, collector) {
    collector.append("(");
    this.visit(o.ast, collector);
    return collector.append(")");
  };

  ToSql.prototype.visitRelNodesAscending = function(o, collector) {
    this.visit(o.expr, collector);
    return collector.append(" ASC");
  };

  ToSql.prototype.visitRelNodesDescending = function(o, collector) {
    this.visit(o.expr, collector);
    return collector.append(" DESC");
  };

  ToSql.prototype.visitRelNodesGroup = function(o, collector) {
    return this.visit(o.expr, collector);
  };

  ToSql.prototype.visitRelNodesNamedFunction = function(o, collector) {
    return this.aggregate(o.name, o, collector);
  };

  ToSql.prototype.visitRelNodesCount = function(o, collector) {
    return this.aggregate("COUNT", o, collector);
  };

  ToSql.prototype.visitRelNodesSum = function(o, collector) {
    return this.aggregate("SUM", o, collector);
  };

  ToSql.prototype.visitRelNodesMax = function(o, collector) {
    return this.aggregate("MAX", o, collector);
  };

  ToSql.prototype.visitRelNodesMin = function(o, collector) {
    return this.aggregate("MIN", o, collector);
  };

  ToSql.prototype.visitRelNodesAvg = function(o, collector) {
    return this.aggregate("AVG", o, collector);
  };

  ToSql.prototype.visitRelNodesTableAlias = function(o, collector) {
    this.visit(o.relation, collector);
    return collector.append(" " + (this.quoteTableName(o.name.toString())));
  };

  ToSql.prototype.visitRelNodesBetween = function(o, collector) {
    this.visit(o.left, collector);
    collector.append(" BETWEEN ");
    return this.visit(o.right, collector);
  };

  ToSql.prototype.visitRelNodesGreaterThan = function(o, collector) {
    this.visit(o.left, collector);
    collector.append(" > ");
    return this.visit(o.right, collector);
  };

  ToSql.prototype.visitRelNodesGreaterThanOrEqual = function(o, collector) {
    this.visit(o.left, collector);
    collector.append(" >= ");
    return this.visit(o.right, collector);
  };

  ToSql.prototype.visitRelNodesLessThan = function(o, collector) {
    this.visit(o.left, collector);
    collector.append(" < ");
    return this.visit(o.right, collector);
  };

  ToSql.prototype.visitRelNodesLessThanOrEqual = function(o, collector) {
    this.visit(o.left, collector);
    collector.append(" <= ");
    return this.visit(o.right, collector);
  };

  ToSql.prototype.visitRelNodesMatches = function(o, collector) {
    this.visit(o.left, collector);
    collector.append(" LIKE ");
    return this.visit(o.right, collector);
  };

  ToSql.prototype.visitRelNodesDoesNotMatch = function(o, collector) {
    this.visit(o.left, collector);
    collector.append(" NOT LIKE ");
    return this.visit(o.right, collector);
  };

  ToSql.prototype.visitRelNodesJoinSource = function(o, collector) {
    var _ref;
    if (o.left != null) {
      this.visit(o.left, collector);
    }
    if ((_ref = o.right) != null ? _ref.length : void 0) {
      if (o.left != null) {
        collector.append(" ");
      }
      return this.injectJoin(o.right, collector, " ");
    }
  };

  ToSql.prototype.visitRelNodesStringJoin = function(o, collector) {
    return this.visit(o.left, collector);
  };

  ToSql.prototype.visitRelNodesFullOuterJoin = function(o, collector) {
    return this._visitOuterJoin(o, collector, 'FULL');
  };

  ToSql.prototype.visitRelNodesOuterJoin = function(o, collector) {
    return this._visitOuterJoin(o, collector, 'LEFT');
  };

  ToSql.prototype.visitRelNodesRightOuterJoin = function(o, collector) {
    return this._visitOuterJoin(o, collector, 'RIGHT');
  };

  ToSql.prototype.visitRelNodesInnerJoin = function(o, collector) {
    collector.append("INNER JOIN ");
    this.visit(o.left, collector);
    if (o.right != null) {
      collector.append(" ");
      return this.visit(o.right, collector);
    }
  };

  ToSql.prototype.visitRelNodesOn = function(o, collector) {
    collector.append("ON ");
    return this.visit(o.expr, collector);
  };

  ToSql.prototype.visitRelNodesNot = function(o, collector) {
    collector.append("NOT (");
    this.visit(o.expr, collector);
    return collector.append(")");
  };

  ToSql.prototype.visitRelNodesTable = function(o, collector) {
    return collector.append(o.tableAlias != null ? "" + (this.quoteTableName(o.name)) + " " + (quoteTableName(o.tableAlias)) : this.quoteTableName(o.name));
  };

  ToSql.prototype.visitRelNodesIn = function(o, collector) {
    if (u.isArray(o.right) && !o.right.length) {
      return collector.append("1=0");
    } else {
      this.visit(o.left, collector);
      collector.append(" IN (");
      this.visit(o.right, collector);
      return collector.append(")");
    }
  };

  ToSql.prototype.visitRelNodesNotIn = function(o, collector) {
    if (u.isArray(o.right) && !o.right.length) {
      return collector.append("1=1");
    } else {
      this.visit(o.left, collector);
      collector.append(" NOT IN (");
      this.visit(o.right, collector);
      return collector.append(")");
    }
  };

  ToSql.prototype.visitRelNodesAnd = function(o, collector) {
    return this.injectJoin(o.children, collector, ' AND ');
  };

  ToSql.prototype.visitRelNodesOr = function(o, collector) {
    this.visit(o.left, collector);
    collector.append(" OR ");
    return this.visit(o.right, collector);
  };

  ToSql.prototype.visitRelNodesAssignment = function(o, collector) {
    var _ref, _ref1;
    if ((_ref = (_ref1 = o.right) != null ? _ref1.constructor : void 0) === Nodes.UnqualifiedColumn || _ref === Attributes.Attribute || _ref === Nodes.BindParam) {
      this.visit(o.left, collector);
      collector.append(" = ");
      return this.visit(o.right, collector);
    } else {
      this.visit(o.left, collector);
      return collector.append(" = " + (this.quote(o.right, this.columnFor(o.left))));
    }
  };

  ToSql.prototype.visitRelNodesEquality = function(o, collector) {
    if (o.right != null) {
      this.visit(o.left, collector);
      collector.append(" = ");
      return this.visit(o.right, collector);
    } else {
      this.visit(o.left, collector);
      return collector.append(" IS NULL");
    }
  };

  ToSql.prototype.visitRelNodesNotEqual = function(o, collector) {
    if (o.right != null) {
      this.visit(o.left, collector);
      collector.append(" != ");
      return this.visit(o.right, collector);
    } else {
      this.visit(o.left, collector);
      return collector.append(" IS NOT NULL");
    }
  };

  ToSql.prototype.visitRelNodesAs = function(o, collector) {
    this.visit(o.left, collector);
    collector.append(" AS ");
    return this.visit(o.right, collector);
  };

  ToSql.prototype.visitRelNodesUnqualifiedColumn = function(o, collector) {
    return collector.append(this.quoteColumnName(o.name));
  };

  ToSql.prototype.visitRelNodesAttribute = function(o, collector) {
    var joinName;
    joinName = (o.relation.tableAlias || o.relation.name).toString();
    return collector.append("" + (this.quoteTableName(joinName)) + "." + (this.quoteColumnName(o.name)));
  };

  ToSql.prototype.visitRelNodesAttrInteger = function(o, collector) {
    return this.visitRelNodesAttribute(o);
  };

  ToSql.prototype.visitRelNodesAttrFloat = function(o, collector) {
    return this.visitRelNodesAttribute(o);
  };

  ToSql.prototype.visitRelNodesAttrString = function(o, collector) {
    return this.visitRelNodesAttribute(o);
  };

  ToSql.prototype.visitRelNodesAttrTime = function(o, collector) {
    return this.visitRelNodesAttribute(o);
  };

  ToSql.prototype.visitRelNodesAttrBoolean = function(o, collector) {
    return this.visitRelNodesAttribute(o);
  };

  ToSql.prototype.literal = function(o, collector) {
    return collector.append(o);
  };

  ToSql.prototype.visitRelNodesBindParam = function(o, collector) {
    return collector.addBind(o);
  };

  ToSql.prototype.visitRelNodesSqlLiteral = function(o, collector) {
    return this.literal(o, collector);
  };

  ToSql.prototype.visitRelNodesNumber = function(o, collector) {
    return this.literal(o, collector);
  };

  ToSql.prototype.quoted = function(o) {
    return this.quote(o, this.last_column);
  };

  ToSql.prototype.unsupported = function(o, collector) {
    throw new Error("unsupported " + o);
  };

  ToSql.prototype.visitRelNodesString = function(o, collector) {
    return collector.append(this.quoted(o));
  };

  ToSql.prototype.visitRelNodesDate = function(o, collector) {
    return collector.append(this.quoted(o));
  };

  ToSql.prototype.visitRelNodesBoolean = function(o, collector) {
    return collector.append(this.quoted(o));
  };

  ToSql.prototype.visitRelNodesArray = function(o, collector) {
    return this.injectJoin(o, collector, ', ');
  };

  ToSql.prototype.quote = function(value, column) {
    if (column == null) {
      column = null;
    }
    if ((value != null ? value.constructor : void 0) === Nodes.SqlLiteral) {
      return value;
    } else {
      return this.engine.quote(value, column);
    }
  };

  ToSql.prototype.quoteTableName = function(name) {
    if ((name != null ? name.constructor : void 0) === Nodes.SqlLiteral) {
      return name;
    } else {
      return this.engine.quoteTableName(name);
    }
  };

  ToSql.prototype.quoteColumnName = function(name) {
    if ((name != null ? name.constructor : void 0) === Nodes.SqlLiteral) {
      return name;
    } else {
      return this.engine.quoteColumnName(name);
    }
  };

  ToSql.prototype.maybeVisit = function(thing, collector) {
    if (thing != null) {
      collector.append(" ");
      return this.visit(thing, collector);
    }
  };

  ToSql.prototype.injectJoin = function(list, collector, joinStr) {
    var i, last, x, _i, _len;
    last = list.length - 1;
    for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
      x = list[i];
      this.visit(x, collector);
      if (i !== last) {
        collector.append(joinStr);
      }
    }
    return collector;
  };

  ToSql.prototype.aggregate = function(name, o, collector) {
    collector.append("" + name + "(");
    if (o.distinct) {
      collector.append('DISTINCT ');
    }
    this.injectJoin(o.expressions, collector, ", ");
    if (o.alias) {
      collector.append(" AS ");
      this.visit(o.alias, collector);
    }
    return collector.append(")");
  };

  ToSql.prototype.visitRelNodesTableStar = function(o, collector) {
    var joinName, rel;
    rel = o.expr;
    joinName = rel.tableAlias || rel.name;
    return "" + (this.quoteTableName(joinName)) + ".*";
  };

  ToSql.prototype.visitRelNodesConstLit = function(o, collector) {
    return this.visit(o.expr, collector);
  };

  ToSql.prototype.visitRelNodesLike = function(o, collector) {
    this.visit(o.left, collector);
    collector.append(" LIKE ");
    return this.visit(o.right, collector);
  };

  ToSql.prototype.visitRelNodesILike = function(o, collector) {
    this.visit(o.left, collector);
    collector.append(" ILIKE ");
    return this.visit(o.right, collector);
  };

  ToSql.prototype._visitOuterJoin = function(o, collector, joinType) {
    collector.append("" + joinType + " OUTER JOIN ");
    this.visit(o.left, collector);
    collector.append(" ");
    return this.visit(o.right, collector);
  };

  ToSql.prototype.visitRelNodesFunctionNode = function(o, collector) {
    var x, _i, _len, _ref;
    this.visit(o.alias, collector);
    collector.append("(");
    _ref = o.expressions;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      this.visit(x, collector);
    }
    return collector.append(")");
  };

  ToSql.prototype.visitRelNodesCase = function(o, collector) {
    var cond, res, _i, _len, _ref, _ref1;
    collector.append("CASE");
    if (o._base !== void 0) {
      collector.append(" ");
      this.visit(o._base, collector);
    }
    _ref = o._cases;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _ref1 = _ref[_i], cond = _ref1[0], res = _ref1[1];
      collector.append(" WHEN ");
      this.visit(cond, collector);
      collector.append(" THEN ");
      this.visit(res, collector);
    }
    if (o._else !== void 0) {
      collector.append(" ELSE ");
      this.visit(o._else, collector);
    }
    return collector.append(" END");
  };

  ToSql.prototype.visitRelNodesNull = function(o, collector) {
    return collector.append('NULL');
  };

  ToSql.prototype.visitRelNodesIsNull = function(o, collector) {
    this.visit(o.expr, collector);
    return collector.append(" IS NULL");
  };

  ToSql.prototype.visitRelNodesNotNull = function(o, collector) {
    this.visit(o.expr, collector);
    return collector.append(" IS NOT NULL");
  };

  return ToSql;

})(Reduce);

exports = module.exports = ToSql;
