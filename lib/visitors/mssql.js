// Generated by CoffeeScript 1.8.0
var MSSQL, Nodes, RowNumber, ToSql,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Nodes = require('../nodes');

ToSql = require('./to-sql');

RowNumber = (function() {
  function RowNumber(children) {
    this.children = children;
  }

  return RowNumber;

})();

MSSQL = (function(_super) {
  __extends(MSSQL, _super);

  function MSSQL() {
    return MSSQL.__super__.constructor.apply(this, arguments);
  }

  MSSQL.prototype.visitRelNodesRowNumber = function(o, collector) {
    var _ref;
    collector.append("ROW_NUMBER() OVER (ORDER BY ");
    if ((_ref = o.children) != null ? _ref.length : void 0) {
      this.injectJoin(o.children, collector, ", ");
    } else {
      collector.append("(SELECT 0)");
    }
    return collector.append(") as _row_num");
  };

  MSSQL.prototype.visitRelNodesSelectStatement = function(o, collector) {
    var core, coreOrderBy, isSelectCount, x, _i, _j, _len, _len1, _ref, _ref1;
    if (!o.limit && !o.offset) {
      return MSSQL.__super__.visitRelNodesSelectStatement.call(this, o, collector);
    }
    isSelectCount = false;
    _ref = o.cores;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      coreOrderBy = this.rowNumLiteral(this.determineOrderBy(o.orders, x));
      if (this.isSelectCount(x)) {
        x.projections = [coreOrderBy];
        isSelectCount = true;
      } else {
        x.projections.push(coreOrderBy);
      }
    }
    if (isSelectCount) {
      collector.append("SELECT COUNT(1) as count_id FROM (");
    }
    collector.append("SELECT _t.* FROM (");
    _ref1 = o.cores;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      core = _ref1[_j];
      this.visit(core, collector);
    }
    collector.append(") as _t WHERE " + (this.getOffsetLimitClause(o)));
    if (isSelectCount) {
      return collector.append(") AS subquery");
    }
  };

  MSSQL.prototype.getOffsetLimitClause = function(o) {
    var firstRow, lastRow;
    firstRow = o.offset != null ? o.offset.expr + 1 : 1;
    lastRow = o.limit != null ? o.limit.expr - 1 + firstRow : void 0;
    if (lastRow) {
      return "_row_num BETWEEN " + firstRow + " AND " + lastRow;
    } else {
      return "_row_num >= " + firstRow;
    }
  };

  MSSQL.prototype.determineOrderBy = function(orders, x) {
    var _ref;
    if (orders != null ? orders.length : void 0) {
      return orders;
    } else if ((_ref = x.groups) != null ? _ref.length : void 0) {
      return x.groups;
    } else {
      return [];
    }
  };

  MSSQL.prototype.rowNumLiteral = function(orderBy) {
    return new RowNumber(orderBy);
  };

  MSSQL.prototype.isSelectCount = function(x) {
    return x.projections.length === 1 && x.projections[0].constructor === Nodes.Count;
  };

  return MSSQL;

})(ToSql);

module.exports = MSSQL;
