// Generated by CoffeeScript 1.8.0
var Expressions, FunctionNode, Node, Predications, SqlLiteral, exports, u,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

u = require('underscore');

Node = require('./node');

SqlLiteral = require('./sql-literal');

Expressions = require('../expressions');

Predications = require('../predications');

FunctionNode = (function(_super) {
  __extends(FunctionNode, _super);

  u(FunctionNode.prototype).extend(Expressions, Predications);

  function FunctionNode(expr, aliaz) {
    if (aliaz == null) {
      aliaz = null;
    }
    this.expressions = expr;
    this.alias = aliaz;
    this.distinct = false;
  }

  FunctionNode.prototype.as = function(aliaz) {
    this.alias = new SqlLiteral(aliaz);
    return this;
  };

  FunctionNode.prototype.equals = function(other) {
    if (!other) {
      return false;
    }
    if (other.constructor !== this.constructor) {
      return false;
    }
    if (this.expressions instanceof Node && other.expressions instanceof Node) {
      if (!this.expressions.equals(other.expressions)) {
        return false;
      }
    } else {
      if (this.expressions !== other.expressions) {
        return false;
      }
    }
    if (this.alias instanceof Node && other.alias instanceof Node) {
      if (!this.alias.equals(other.alias)) {
        return false;
      }
    } else {
      if (this.alias !== other.alias) {
        return false;
      }
    }
    if (this.distinct !== other.distinct) {
      return false;
    }
    return true;
  };

  return FunctionNode;

})(Node);

exports = module.exports = FunctionNode;
