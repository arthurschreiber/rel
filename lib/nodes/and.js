// Generated by CoffeeScript 1.8.0
var And, Node, exports,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Node = require('./node');

And = (function(_super) {
  __extends(And, _super);

  function And(children, right) {
    if (right == null) {
      right = null;
    }
    if (Array !== children.constructor) {
      children = [children, right];
    }
    this.children = children;
  }

  And.prototype.left = function() {
    return this.children.first;
  };

  And.prototype.right = function() {
    return this.children[1];
  };

  And.prototype.equals = function(other) {
    var i, _i, _ref;
    if (!other) {
      return false;
    }
    if (other.constructor !== this.constructor) {
      return false;
    }
    if (this.children.length !== other.children.length) {
      return false;
    }
    for (i = _i = 0, _ref = this.children.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (this.children[i] instanceof Node && other.children[i] instanceof Node) {
        if (!this.children[i].equals(other.children[i])) {
          return false;
        }
      } else if (this.children[i] !== other.children[i]) {
        return false;
      }
    }
    return true;
  };

  return And;

})(Node);

exports = module.exports = And;
