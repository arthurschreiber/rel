// Generated by CoffeeScript 1.8.0
var Binary, Node, exports,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Node = require('./node');

Binary = (function(_super) {
  __extends(Binary, _super);

  function Binary(left, right) {
    this.left = left;
    this.right = right;
  }

  Binary.prototype.equals = function(other) {
    if (!other) {
      return false;
    }
    if (other.constructor !== this.constructor) {
      return false;
    }
    if (this.left instanceof Node && other.left instanceof Node) {
      if (!this.left.equals(other.left)) {
        return false;
      }
    } else {
      if (this.left !== other.left) {
        return false;
      }
    }
    if (this.right instanceof Node && other.right instanceof Node) {
      if (!this.right.equals(other.right)) {
        return false;
      }
    } else {
      if (this.right !== other.right) {
        return false;
      }
    }
    return true;
  };

  return Binary;

})(Node);

exports = module.exports = Binary;
