// Generated by CoffeeScript 1.8.0
var Bin, Binary, ConstLit, Group, Having, ILike, IsNull, Like, Limit, Lock, Not, NotNull, Offset, On, TableStar, Top, Unary, u,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

u = require('underscore');

Binary = require('./binary');

Unary = require('./unary');

ConstLit = require('./const-lit');

u.extend(module.exports, {
  True: require('./true'),
  False: require('./false'),
  BindParam: require('./bind-param'),
  SelectStatement: require('./select-statement'),
  InsertStatement: require('./insert-statement'),
  SqlLiteral: require('./sql-literal'),
  SelectCore: require('./select-core'),
  Binary: require('./binary'),
  And: require('./and'),
  ConstLit: ConstLit,
  JoinSource: require('./join-source'),
  Join: require('./join'),
  InnerJoin: require('./inner-join'),
  OuterJoin: require('./outer-join'),
  RightOuterJoin: require('./right-outer-join'),
  FullOuterJoin: require('./full-outer-join'),
  StringJoin: require('./string-join'),
  TableAlias: require('./table-alias'),
  FunctionNode: require('./function-node'),
  NamedFunction: require('./named-function'),
  Count: require('./count'),
  Sum: require('./sum'),
  Exists: require('./exists'),
  Max: require('./max'),
  Min: require('./min'),
  Avg: require('./avg'),
  As: require('./as'),
  Assignment: require('./assignment'),
  Between: require('./between'),
  Matches: require('./matches'),
  DoesNotMatch: require('./does-not-match'),
  GreaterThan: require('./greater-than'),
  GreaterThanOrEqual: require('./greater-than-or-equal'),
  Like: Like = (function(_super) {
    __extends(Like, _super);

    function Like() {
      return Like.__super__.constructor.apply(this, arguments);
    }

    return Like;

  })(Binary),
  ILike: ILike = (function(_super) {
    __extends(ILike, _super);

    function ILike() {
      return ILike.__super__.constructor.apply(this, arguments);
    }

    return ILike;

  })(Binary),
  LessThan: require('./less-than'),
  LessThanOrEqual: require('./less-than-or-equal'),
  NotEqual: require('./not-equal'),
  NotIn: require('./not-in'),
  NotRegexp: require('./not-regexp'),
  Or: require('./or'),
  Regexp: require('./regexp'),
  Union: require('./union'),
  UnionAll: require('./union-all'),
  Intersect: require('./intersect'),
  Except: require('./except'),
  Ordering: require('./ordering'),
  Ascending: require('./ascending'),
  Descending: require('./descending'),
  IsNull: IsNull = (function(_super) {
    __extends(IsNull, _super);

    function IsNull() {
      return IsNull.__super__.constructor.apply(this, arguments);
    }

    return IsNull;

  })(Unary),
  NotNull: NotNull = (function(_super) {
    __extends(NotNull, _super);

    function NotNull() {
      return NotNull.__super__.constructor.apply(this, arguments);
    }

    return NotNull;

  })(Unary),
  Bin: Bin = (function(_super) {
    __extends(Bin, _super);

    function Bin() {
      return Bin.__super__.constructor.apply(this, arguments);
    }

    return Bin;

  })(Unary),
  Group: Group = (function(_super) {
    __extends(Group, _super);

    function Group() {
      return Group.__super__.constructor.apply(this, arguments);
    }

    return Group;

  })(Unary),
  Grouping: require('./grouping'),
  Having: Having = (function(_super) {
    __extends(Having, _super);

    function Having() {
      return Having.__super__.constructor.apply(this, arguments);
    }

    return Having;

  })(Unary),
  Limit: Limit = (function(_super) {
    __extends(Limit, _super);

    function Limit() {
      return Limit.__super__.constructor.apply(this, arguments);
    }

    return Limit;

  })(Unary),
  Not: Not = (function(_super) {
    __extends(Not, _super);

    function Not() {
      return Not.__super__.constructor.apply(this, arguments);
    }

    return Not;

  })(Unary),
  Offset: Offset = (function(_super) {
    __extends(Offset, _super);

    function Offset() {
      return Offset.__super__.constructor.apply(this, arguments);
    }

    return Offset;

  })(Unary),
  On: On = (function(_super) {
    __extends(On, _super);

    function On() {
      return On.__super__.constructor.apply(this, arguments);
    }

    return On;

  })(Unary),
  Top: Top = (function(_super) {
    __extends(Top, _super);

    function Top() {
      return Top.__super__.constructor.apply(this, arguments);
    }

    return Top;

  })(Unary),
  Lock: Lock = (function(_super) {
    __extends(Lock, _super);

    function Lock() {
      return Lock.__super__.constructor.apply(this, arguments);
    }

    return Lock;

  })(Unary),
  Equality: require('./equality'),
  In: require('./in'),
  With: require('./with'),
  WithRecursive: require('./with-recursive'),
  TableStar: TableStar = (function(_super) {
    __extends(TableStar, _super);

    function TableStar() {
      return TableStar.__super__.constructor.apply(this, arguments);
    }

    return TableStar;

  })(Unary),
  Unary: require('./unary'),
  Values: require('./values'),
  UnqualifiedColumn: require('./unqualified-column')
});
