// Generated by CoffeeScript 1.8.0
var Attributes, Crud, DeleteManager, FactoryMethods, InsertManager, Nodes, SelectManager, Table, UpdateManager, u,
  __slice = [].slice;

u = require('underscore');

SelectManager = require('./select-manager');

InsertManager = require('./insert-manager');

UpdateManager = require('./update-manager');

DeleteManager = require('./delete-manager');

Attributes = require('./attributes');

Nodes = require('./nodes');

FactoryMethods = require('./factory-methods');

Crud = require('./crud');

Table = (function() {
  u.extend(Table.prototype, FactoryMethods, Crud);

  function Table(name, engine, opts) {
    this.name = name;
    this.engine = engine;
    if (opts == null) {
      opts = {};
    }
    this.columns = null;
    this.aliases = [];
    this.tableAlias = null;
    if (opts['as'] != null) {
      this.tableAlias = opts['as'];
    }
  }

  Table.prototype.from = function(table) {
    return new SelectManager(this.engine, table);
  };

  Table.prototype.project = function() {
    var things, _ref;
    things = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return (_ref = this.from(this)).project.apply(_ref, things);
  };

  Table.prototype.attribute = function(name) {
    return new Attributes.Attribute(this, name);
  };

  Table.prototype.alias = function(name) {
    if (name == null) {
      name = "" + this.name + "_2";
    }
    return u(new Nodes.TableAlias(this, name)).tap((function(_this) {
      return function(node) {
        return _this.aliases.push(node);
      };
    })(this));
  };

  Table.prototype.column = function(name) {
    return new Attributes.Attribute(this, name);
  };

  Table.prototype.join = function(relation, klass) {
    if (klass == null) {
      klass = Nodes.InnerJoin;
    }
    if (relation == null) {
      return this.from(this);
    }
    switch (relation.constructor) {
      case String:
      case Nodes.SqlLiteral:
        klass = Nodes.StringJoin;
    }
    return this.from(this).join(relation, klass);
  };

  Table.prototype.insertManager = function() {
    return new InsertManager(this.engine);
  };

  Table.prototype.skip = function(amount) {
    return this.from(this).skip(amount);
  };

  Table.prototype.selectManager = function() {
    return new SelectManager(this.engine);
  };

  Table.prototype.updateManager = function() {
    return new UpdateManager(this.engine);
  };

  Table.prototype.deleteManager = function() {
    return new DeleteManager(this.engine);
  };

  Table.prototype.having = function(expr) {
    return this.from(this).having(expr);
  };

  Table.prototype.group = function() {
    var columns, _ref;
    columns = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return (_ref = this.from(this)).group.apply(_ref, columns);
  };

  Table.prototype.order = function() {
    var expr, _ref;
    expr = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return (_ref = this.from(this)).order.apply(_ref, expr);
  };

  Table.prototype.take = function(amount) {
    return this.from(this).take(amount);
  };

  Table.prototype.where = function(condition) {
    return this.from(this).where(condition);
  };

  Table.prototype.star = function() {
    return this.column(new Nodes.SqlLiteral('*'));
  };

  return Table;

})();

module.exports = Table;
